"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ApplicationData, Invoice, InvoiceStatus } from "@/lib/types/applications";
import { FileText, Eye, Plus } from "lucide-react";


interface InvoiceManagementProps {
  application: ApplicationData;
  onInvoiceCreated?: (invoice: Invoice) => void;
  onInvoiceUpdated?: (invoice: Invoice) => void;
}

export function InvoiceManagement({ 
  application, 
  onInvoiceCreated, 
  onInvoiceUpdated 
}: InvoiceManagementProps) {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isCreating, setIsCreating] = useState(false);

  // Invoice creation form state
  const [invoiceForm, setInvoiceForm] = useState({
    notes: "",
    dueDate: "",
    items: [] as Array<{
      itemName: string;
      itemType: string;
      unitPrice: string;
      isAutoGenerated?: boolean;
    }>
  });

  // Fetch invoices for this application
  useEffect(() => {
    const fetchInvoices = async () => {
      try {
        setIsLoading(true);
        const response = await fetch(`/api/admin/applications/${application.id}/invoices`);
        if (response.ok) {
          const data = await response.json();
          setInvoices(data);
        }
      } catch (error) {
        console.error('Failed to fetch invoices:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchInvoices();
  }, [application.id]);

  // Auto-populate invoice items when dialog opens
  const handleCreateDialogOpen = (open: boolean) => {
    setIsCreateDialogOpen(open);
    if (open) {
      // Auto-populate items based on service and selected features
      const autoItems: Array<{
        itemName: string;
        itemType: string;
        unitPrice: string;
        isAutoGenerated: boolean;
      }> = [];

      // Add base service
      autoItems.push({
        itemName: application.serviceName,
        itemType: "service",
        unitPrice: "0.00",
        isAutoGenerated: true
      });

      // Add selected optional features
      if (application.selectedFeatures && application.selectedFeatures.length > 0) {
        application.selectedFeatures.forEach(feature => {
          autoItems.push({
            itemName: feature.featureName,
            itemType: feature.featureType,
            unitPrice: "0.00",
            isAutoGenerated: true
          });
        });
      }

      setInvoiceForm(prev => ({
        ...prev,
        items: autoItems
      }));
    }
  };

  const handleCreateInvoice = async () => {
    setIsCreating(true);
    try {
      // Calculate total amount from all items
      const totalAmount = invoiceForm.items.reduce((sum, item) =>
        sum + (parseFloat(item.unitPrice) || 0), 0
      );

      // Generate invoice number
      const invoiceNumber = `INV-${Date.now()}`;

      const invoiceData = {
        applicationId: application.id,
        invoiceNumber,
        basePrice: 0, // No separate base price, everything is in items
        totalAmount,
        currency: "GHS",
        status: "PENDING", // API expects uppercase, but returns lowercase
        dueDate: null,
        notes: invoiceForm.notes || null,
        items: invoiceForm.items.map((item, index) => ({
          itemType: item.itemType,
          itemName: item.itemName,
          quantity: 1,
          unitPrice: parseFloat(item.unitPrice) || 0,
          totalPrice: parseFloat(item.unitPrice) || 0,
          sortOrder: index,
        }))
      };

      const response = await fetch('/api/admin/invoices', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(invoiceData),
      });

      if (!response.ok) {
        throw new Error('Failed to create invoice');
      }

      const result = await response.json();

      // Add the new invoice to the local state
      setInvoices(prev => [...prev, result.invoice]);

      onInvoiceCreated?.(result.invoice);
      setIsCreateDialogOpen(false);
      
      // Reset form
      setInvoiceForm({
        notes: "",
        dueDate: "",
        items: []
      });
    } catch (error) {
      console.error('Error creating invoice:', error);
    } finally {
      setIsCreating(false);
    }
  };



  const updateInvoiceItem = (index: number, field: string, value: any) => {
    setInvoiceForm(prev => ({
      ...prev,
      items: prev.items.map((item, i) =>
        i === index ? { ...item, [field]: value } : item
      )
    }));
  };

  const getStatusBadge = (status: InvoiceStatus) => {
    const variants = {
      pending: "secondary",
      sent: "outline",
      paid: "default",
      overdue: "destructive",
      cancelled: "secondary"
    } as const;

    return (
      <Badge variant={variants[status] || "secondary"}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </Badge>
    );
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <FileText className="h-5 w-5" />
          Invoices ({application.invoices?.length || 0})
        </h3>
        
        <Dialog open={isCreateDialogOpen} onOpenChange={handleCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button size="sm">
              <Plus className="h-4 w-4 mr-2" />
              Create Invoice
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Create Invoice</DialogTitle>
              <DialogDescription>
                Create a custom invoice for {application.firstName} {application.lastName}
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              {/* Pricing Instructions */}
              <div className="rounded-lg ">
                <h6 className="font-medium  mb-1">Set Pricing</h6>
                <p className="text-sm ">
                  Enter the price for each service and optional feature for {application.firstName} {application.lastName}.
                </p>
              </div>

              {/* Invoice Items */}
              <div className="space-y-3">
                <Label>Invoice Items</Label>

                {invoiceForm.items.length > 0 && (
                  <div className="border rounded-lg overflow-hidden">
                    <Table>
                      <TableHeader>
                        <TableRow className="h-10">
                          <TableHead className="py-2">Service/Feature</TableHead>
                          <TableHead className="py-2 w-32">Price (₵)</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {invoiceForm.items.map((item, index) => (
                          <TableRow key={index} className={`h-12 ${item.itemType === 'service'}`}>
                            <TableCell className="py-2">
                              <div className="flex items-center gap-2">
                                <span className={`${item.itemType === 'service' ? 'font-semibold ' : 'font-normal'}`}>
                                  {item.itemName}
                                </span>
                                {item.itemType === 'service' && (
                                  <Badge variant="default" className="text-xs bg-blue-300">
                                    Base Service
                                  </Badge>
                                )}
                              </div>
                            </TableCell>
                            <TableCell className="py-2">
                              <div className="flex items-center gap-1">
                                <span className="text-sm">₵</span>
                                <Input
                                  type="number"
                                  step="0.01"
                                  placeholder="0.00"
                                  value={item.unitPrice}
                                  onChange={(e) => updateInvoiceItem(index, 'unitPrice', e.target.value)}
                                  className="w-24 h-8"
                                />
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </div>

              {/* Total Preview */}
              <div className="p-4 rounded-lg">
                <div className="flex justify-between items-center">
                  <span className="font-medium text-green-700">Total Amount:</span>
                  <span className="text-xl font-bold text-green-500">
                    ₵{invoiceForm.items.reduce((sum, item) =>
                      sum + (parseFloat(item.unitPrice) || 0), 0
                    ).toFixed(2)}
                  </span>
                </div>
              </div>

              {/* Notes */}
              <div className="space-y-2">
                <Label htmlFor="notes">Notes (Optional)</Label>
                <Textarea
                  id="notes"
                  placeholder="Additional notes for the invoice..."
                  value={invoiceForm.notes}
                  onChange={(e) => setInvoiceForm(prev => ({ ...prev, notes: e.target.value }))}
                  className="h-20"
                />
              </div>
            </div>

            <DialogFooter>
              <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateInvoice} disabled={isCreating}>
                {isCreating ? "Creating..." : "Create Invoice"}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* Existing Invoices */}
      {isLoading ? (
        <div className="text-center py-8 text-muted-foreground border rounded-lg">
          Loading invoices...
        </div>
      ) : invoices && invoices.length > 0 ? (
        <div className="border rounded-lg overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Invoice #</TableHead>
                <TableHead>Amount</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {invoices.map((invoice) => (
                <TableRow key={invoice.id}>
                  <TableCell className="font-medium">
                    {invoice.invoiceNumber}
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-1">
                      <span className="font-medium">₵{invoice.totalAmount.toFixed(2)}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {getStatusBadge(invoice.status)}
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSelectedInvoice(invoice);
                        setIsViewDialogOpen(true);
                      }}
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      View
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      ) : (
        <div className="text-center py-8 text-muted-foreground border rounded-lg">
          No invoices created yet
        </div>
      )}

      {/* View Invoice Dialog */}
      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
        <DialogContent className="max-w-xl">
          <DialogHeader>
            <DialogTitle>Invoice Details</DialogTitle>
          </DialogHeader>

          {selectedInvoice && (
            <div className="space-y-6">
              {/* Invoice Header */}
              <div className="grid grid-cols-2 gap-4 p-4  border border-gray-200 rounded-lg">
                <div>
                  <label className="text-sm font-medium ">Invoice Number</label>
                  <p className="font-mono text-sm">{selectedInvoice.invoiceNumber}</p>
                </div>
                <div>
                  <label className="text-sm font-medium ">Status</label>
                  <div className="mt-1">
                    {getStatusBadge(selectedInvoice.status)}
                  </div>
                </div>
                <div>
                  <label className="text-sm font-medium ">Total Amount</label>
                  <p className="text-lg font-semibold">₵{selectedInvoice.totalAmount.toFixed(2)}</p>
                </div>
                <div>
                  <label className="text-sm font-medium ">Created Date</label>
                  <p className="text-sm">{new Date(selectedInvoice.createdAt).toLocaleDateString()}</p>
                </div>
              </div>

              {/* Invoice Items */}
              <div>
                <h4 className="font-medium mb-3">Invoice Items</h4>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Item</TableHead>
                      <TableHead className="text-right">Price</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {selectedInvoice.items?.map((item, index) => (
                      <TableRow key={index}>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <span className="font-medium">{item.itemName}</span>
                            {item.itemType === 'service' && (
                              <Badge variant="default" className="text-xs">
                                Base Service
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          ₵{(typeof item.unitPrice === 'string' ? parseFloat(item.unitPrice) : item.unitPrice).toFixed(2)}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

              {/* Notes */}
              {selectedInvoice.notes && (
                <div>
                  <h4 className="font-medium mb-2">Notes</h4>
                  <p className="text-sm  p-3 rounded-lg">
                    {selectedInvoice.notes}
                  </p>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}
